// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  stores   Store[] // One-to-many relationship
}

model Store {
  id     Int  @id @default(autoincrement())
  user_id Int // Foreign key to User
  user   User @relation(fields: [user_id], references: [id])
  name    String
  categories Category[]
  product Product[]
  orders Order[]
  borrows Borrows[]
  stocks Stock[]
  line_token String?
  address String?
  district String?  
  area String?
  province String?
  postalcode String?
}

model Category {
  id Int @id @default(autoincrement())
  label String
  store_id Int
  store Store @relation(fields: [store_id], references: [id])
  product Product[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt 
  
  @@unique([label, store_id])
}

model Product {
  id Int @id @default(autoincrement())
  serial String
  label String
  price Int @default(0)
  cost Int @default(0)
  stock Int @default(0)
  stock_min Int @default(10)
  sold Int @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt 

  store_id Int
  store Store @relation(fields: [store_id], references: [id])
  category_id  Int
  category Category @relation(fields: [category_id], references: [id])
  keywords    String   @default("")
  borrows Borrows[]
  stocked StockItem[]

  @@unique([serial, store_id])
}

model Order {
  id Int @id @default(autoincrement())
  price Int 
  cost Int
  profit Int
  method Method @default(CASH)
  type OrderType @default(CASHOUT)
  note String 
  text String @db.Text
  store_id Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt 
  store Store @relation(fields: [store_id], references: [id])
  products OrderProduct[]
}

model Borrows {
  id Int @id @default(autoincrement())
  amount Int
  count Int @default(0)
  note String
  status BorrowState @default(PROGRESS)
  product_id Int
  product Product @relation(fields: [product_id], references: [id])
  store_id Int
  store Store @relation(fields: [store_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt 
}

model OrderProduct {
  id Int @id @default(autoincrement())
  serial String
  label String
  category String
  price Int
  cost Int
  count Int
  overstock Int @default(0)
  overstock_at DateTime?
  order_id Int
  order Order @relation(fields: [order_id], references: [id])
}

model Stock{
  id Int @id @default(autoincrement())
  note String
  state BorrowState
  action_at DateTime @default(now())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt 
  items StockItem[]
  store_id Int
  store Store @relation(fields: [store_id], references: [id])
}

model StockItem{
  id Int @id @default(autoincrement())
  changed_by Int 
  stock_id Int 
  stock Stock @relation(fields: [stock_id], references: [id])
  product_id Int
  product Product @relation(fields: [product_id], references: [id])
}

enum Method {
  CASH
  BANK
}

enum OrderType {
  CASHOUT
  PURCHASE
  BORROW
}

enum BorrowState {
  PROGRESS
  SUCCESS
  CANCEL
}